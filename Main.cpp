#include <iostream>
using namespace std;
/*
	Размер статического массива может быть задан только целочисленным константным значением, и
только во время написания кода. Размер статического массива невозможно изменить после компиляции.
	Размер динамического массива может быть задан переменным значением, во время выполнения программы.
Предварительно, это переменное значение можно вычислить, либо ввести с клавиатуры.
	Для того что бы объявить динамический массив нужно объяавить указатель, и выделить
память при помощи оператора NEW. Оператор NEW выделяет память для N элементов заданного типа
(В данном случае int) и возвращает адрес выделенной памяти. Этот адрес мы и записываем в наш
указатель. Оператор NEW всгда выделяет непрерывный блок памяти.
-----------------------------------------------------------------------------------------------------
						ОБРАЩЕНИЕ 
	Обращаться к элементам динамического можно точно так же как к элементам статического массива, т.е. 
используя арифметику указателей и оператор разименования или же через оператор индексирования.
И в том и в другом случае доступ к элементам массива осуществаляется за константное время, поскольку 
сводится к операции сложения.
-----------------------------------------------------------------------------------------------------
						ПЕРЕДАЧА ДИНАМИЧЕСКОГО МАССИВА В ФУНКЦИЮ

Динамический массив можно передать в функцию точно так же как и статический.
-----------------------------------------------------------------------------------------------------

После того как динамический массив уже не нужен, его нужно удалить, что бы освободжить память  
которую он занимал, что бы эту память можно было использовать. Для удаления динамического массива 

-----------------------------------------------------------------------------------------------------
Stack (стопка)- это модель памяти, из которой последний записанный элемент считывается последним.
Heap (куча) - это динамическая память, свободная память оперативной системы.
-----------------------------------------------------------------------------------------------------
Оператор NEW фактически запрашивает память память у операционной системы. И если у ОС есть непрерывный 
блок памяти нужного размера, то она его выделяет. В противном случае возникает исключение. После того
как мы воспользвались памятью её нужно обратно операционной системе. Именно это и делает оператор DELETE.
Оператор DELETE освобождает память по указанному адресу и абсолютно ни чего не делает с указателем.
-----------------------------------------------------------------------------------------------------
Если только выделять память и никогода её не освобождать то рано или поздно свободная оперативная память 
в ОС закончится, и это в свою очередь закончится крахом нашего приложения. ОС аврийно ЗАВЕРШИТ его работу!!!
-----------------------------------------------------------------------------------------------------
*/
#define tab "\t"

void FillRand(int arr[], const int n);
void Print(int* arr, const int n);

void main()
{
	setlocale(LC_ALL, "Russian");
	int n;
	cout << " Введите размер массива: "; cin >> n;
	//1) Объявление динамического массива
	int* arr = new int[n] {};
	//2) Использование динамического массива
	Print(arr, n);
	FillRand(arr, n);
	Print(arr, n);
	//3) Удаление динамического массива
	delete[] arr;
	cout << " Tat`s okey!!-)" << endl;
}

void FillRand(int arr[], const int n)
{
	for (int i = 0; i < n; i++)
	{
		//Доступ к элементам массива через арифметику и оператор разименования.
		*(arr + i) = rand();
	}
}

void Print(int* arr, const int n)
{
	for (int i = 0; i < n; i++)
	{
		cout << arr[i] << tab;
	}
	cout << endl;
}